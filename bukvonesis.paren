(in-package :bukvonesis)

(defvar paper nil)

(defvar bukvonesis-coords-array nil)
(defvar bukvonesis-font-name nil)
(defvar bukvonesis-letter nil)

(defvar ws-client nil)

(defun upload-file (file)
  (let ((xhr (new (*x-m-l-http-request)))
	(form-data (new (*form-data))))

    (setf bukvonesis-font-name (@ file name))
    (setf (@ xhr onreadystatechange) (on-font-upload xhr))
    (chain form-data (append "fontfile" file))
    (chain xhr (open "POST" "font-upload"))
    (chain xhr (send form-data))))

(defun on-font-upload (xhr)
  (lambda ()
    (when (equal (@ xhr ready-state) 4)
      (when (equal (@ xhr status) 200)
	(let ((font-face (chain document (create-element "style"))))
	  (chain font-face (set-attribute "type" "text/css"))
	  (setf (@ font-face inner-h-t-m-l)  (+ "@font-face { font-family: "
						"'" bukvonesis-font-name "'"
						";  src: url('"
						(@ xhr response-text)
						"')}"))
	  (chain (@  ($ (chain document head))) (append font-face)))
	(prompt-for-letter)))))

(defun prompt-for-letter ()
  (chain (@ ($ "#mainMenu")) (empty))
  (display-font-sample)
  (chain (@ ($ "#mainMenu")) (append "<h1>Type a letter to generate</h1>"))

  ((@ ($ document) keypress)
   (lambda (event)
     (on-key-pressed event))))

(defun display-font-sample ()
    (chain (@ ($ "#mainMenu")) (append (+ "<h1 id='fontSample'>ABCDEFFGHIJKLMNOPQRSTUVWXYZ </br> abcdefghijklmnopqrstuvwxyz</h1>")))
    (setf (@ (chain document (get-element-by-id "fontSample")) style font-family) (+ "'" bukvonesis-font-name "'")))

(defun on-key-pressed (event)
  ;;todo unbind event handler
  (chain (@ ($ "#mainMenu")) (empty))
  (setf bukvonesis-letter (chain *string (from-char-code (@ event which))))
  (draw-letter bukvonesis-letter)
  (send-letter (@ event which)))

;;Convert a quadratic bezier curve to cubic
(defun to-cubic (curve)
  (let ((cubic (make-array 8)))
    ;;start x, start y
    (setf (aref cubic 0) (aref curve 0))
    (setf (aref cubic 1) (aref curve 1))
    ;;control x1, control y1
    (setf (aref cubic 2) (+ (aref curve 0) (* (/ 2.0 3.0) (- (aref curve 2) (aref curve 0)))))
    (setf (aref cubic 3) (+ (aref curve 1) (* (/ 2.0 3.0) (- (aref curve 3) (aref curve 1)))))
    ;control x2, control y2
    (setf (aref cubic 4) (+ (aref curve 4) (* (/ 2.0 3.0) (- (aref curve 2) (aref curve 4)))))
    (setf (aref cubic 5) (+ (aref curve 5) (* (/ 2.0 3.0) (- (aref curve 3) (aref curve 5)))))
    ;end x, end y
    (setf (aref cubic 6) (aref curve 4))
    (setf (aref cubic 7) (aref curve 5)))
  cubic)

;;websockets
(defun init-ws ()
  (let ((ws (new (*web-socket "ws://localhost:12345/bukvonesis"))))
    (setf (@ ws onmessage) (lambda (event)
			     (setf bukvonesis-coords-array (chain *j-s-o-n (parse (@ event data)))) ;;todo do I need bukvonesis-coords-array???
			     (draw-coords bukvonesis-coords-array)))
    ws))

(defun send-letter (letter-code)
  (chain ws-client (send (chain *j-s-o-n (stringify (create "letter-code" letter-code "font-name" bukvonesis-font-name))))))

;;raphael
(defun draw-letter (letter)
  (chain paper (text (/ (@ paper width) 2) (/ (@ paper height) 2) letter) (attr (create "font-family" (+ "'" bukvonesis-font-name "'")
											"font-size" 400))))

(defun draw-coords (coords-array)
  (console.log "tadam")
  (loop for segment across coords-array
     do (cond ((and (= (aref segment 2) 0) (= (aref segment 3) 0))
	       ;;add straight line
	       (chain paper (path (+ "M" (aref segment 0) " " (aref segment 1)
				     "L" (aref segment 4) " " (aref segment 5)))
		      (transform "S0.5,2,150,200"))))))
	      ;; (T
	      ;;  ;;add curve
	      ;;  (let ((cubic (to-cubic segment)))
	      ;; 	 (p5 (bezier (aref cubic 0) (aref cubic 1) 0
	      ;; 		     (aref cubic 2) (aref cubic 3) 0
	      ;; 		     (aref cubic 4) (aref cubic 5) 0
	      ;; 		     (aref cubic 6) (aref cubic 7) 0)))))))


;;main
($$ (document ready)
    ;; setup processing.js
    (setf paper (new (*Raphael "bukvonesis" 1140 715)))

    ;; setup websockets
    (setf ws-client (init-ws))

    ;; event handlers
    ($$ ("#font-selector" change)
	(upload-file (@ ($ this) 0 files 0))))
