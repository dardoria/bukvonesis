(in-package :bukvonesis)

(defvar paper nil)

(defvar bukvonesis-coords-array (array))
(defvar bukvonesis-units-per-em nil)
(defvar bukvonesis-font-name nil)
(defvar bukvonesis-letter nil)
(defvar bukvonesis-font-size 100)
(defvar bukvonesis-gen-size (* bukvonesis-font-size 3))
(defvar bukvonesis-bounding-box nil)

(defvar ws-client nil)

(defun upload-file (file)
  (let ((xhr (new (*x-m-l-http-request)))
	(form-data (new (*form-data))))

    (setf bukvonesis-font-name (@ file name))
    (setf (@ xhr onreadystatechange) (on-font-upload xhr))
    (chain form-data (append "fontfile" file))
    (chain xhr (open "POST" "font-upload"))
    (chain xhr (send form-data))))

(defun on-font-upload (xhr)
  (lambda ()
    (when (equal (@ xhr ready-state) 4)
      (when (equal (@ xhr status) 200)
	(let ((font-face (chain document (create-element "style"))))
	  (chain font-face (set-attribute "type" "text/css"))
	  (setf (@ font-face inner-h-t-m-l)  (+ "@font-face { font-family: "
						"'" bukvonesis-font-name "'"
						";  src: url('"
						(@ xhr response-text)
						"')}"))
	  (chain (@  ($ (chain document head))) (append font-face)))
	(prompt-for-letter)))))

(defun prompt-for-letter ()
  (chain (@ ($ "#mainMenu")) (empty))
  (display-font-sample)
  (chain (@ ($ "#mainMenu")) (append "<h1>Type a letter to generate</h1>"))

  ((@ ($ document) keypress)
   (lambda (event)
     (on-key-pressed event))))

(defun display-font-sample ()
    (chain (@ ($ "#mainMenu")) (append (+ "<h1 id='fontSample'>ABCDEFFGHIJKLMNOPQRSTUVWXYZ </br> abcdefghijklmnopqrstuvwxyz</h1>")))
    (setf (@ (chain document (get-element-by-id "fontSample")) style font-family) (+ "'" bukvonesis-font-name "'")))

(defun on-key-pressed (event)
  ;;todo unbind event handler
  (chain (@ ($ "#mainMenu")) (empty))
  (draw-letter (chain *string (from-char-code (@ event which))))
  (send-letter (@ event which)))

;;websockets
(defun init-ws ()
  (let ((ws (new (*web-socket "ws://localhost:12345/bukvonesis"))))
    (setf (@ ws onmessage) (lambda (event)
			     (let ((result (chain *j-s-o-n (parse (@ event data)))))
			       (chain bukvonesis-coords-array (push (@ result "result")))
			       (setf bukvonesis-units-per-em (@ result "units-per-em"))
			       (setf bukvonesis-bounding-box (@ result "bounding-box"))

			       (draw-coords bukvonesis-coords-array))))
    ws))

(defun send-letter (letter-code)
  (chain ws-client (send (chain *j-s-o-n (stringify (create "letter-code" letter-code "font-name" bukvonesis-font-name))))))

;;raphael
(defun draw-letter (letter)
  (setf bukvonesis-letter (chain paper (text (/ (@ paper width) 2) (/ (@ paper height) 2) letter)
   				 (attr (create "font-family" (+ "'" bukvonesis-font-name "'")
   					       "font-size" bukvonesis-font-size
   					       "fill" "grey"
					       "text_anchor" "start")))))

(defun draw-coords (coords-array)
  (console.log "tadam")
  (chain paper (clear))
  (let* ((letter-box (chain bukvonesis-letter (get-b-box)))
	 (scale (/ bukvonesis-gen-size bukvonesis-units-per-em))
 	 (x-pos (- (@ letter-box x2) (* scale (aref bukvonesis-bounding-box 0))))
 	 (y-pos (+ (@ letter-box y) (* scale (aref bukvonesis-bounding-box 3))))
	 (transform (+ "S" scale "," (* -1 scale) ",0,0" "T" x-pos "," y-pos)))

    ;; draw first version
    (loop for segment across (aref coords-array 0)
       do (cond ((and (= (aref segment 2) 0) (= (aref segment 3) 0))
		 ;;add straight line
		 (chain paper
			(path (+ "M" (aref segment 0) " " (aref segment 1)
				 "L" (aref segment 4) " " (aref segment 5)))
			(attr (create "stroke" "red"))
			(transform transform)
			))
		(T
		 ;;add curve
		 (chain paper
			(path (+ "M" (aref segment 0) " " (aref segment 1) " "
				 "C" (aref segment 0) " " (aref segment 1) " "
				 (aref segment 2) " " (aref segment 3) " "
				 (aref segment 4) " " (aref segment 5)))
			(attr (create "stroke" "red"))
			(transform transform)
			))))))
;;main
($$ (document ready)
    ;; setup raphael.js
    (setf paper (new (*Raphael "bukvonesis" 1140 715)))

    ;; setup websockets
    (setf ws-client (init-ws))

    ;; event handlers
    ($$ ("#font-selector" change)
	(upload-file (@ ($ this) 0 files 0))))
