(in-package :bukvonesis)
(defvar font-name nil)
(defvar ws-client nil)

;;inject paper.js in the global scope
(chain paper (install window))

;;setup the canvas
($$ (document ready)
    ;; setup paper.js
    (chain paper (setup "bukvonesis"))
    ;; setup websockets
    (setf ws-client (init-ws))

    ;; event handlers
    ($$ ("#font-selector" change)
	(upload-file (@ ($ this) 0 files 0))))

(defun upload-file (file)
  (let ((xhr (new (*x-m-l-http-request)))
	(form-data (new (*form-data))))

    (setf font-name (@ file name))
    (setf (@ xhr onreadystatechange) (on-font-upload xhr))
    (chain form-data (append "fontfile" file))
    (chain xhr (open "POST" "font-upload"))
    (chain xhr (send form-data))))

(defun on-font-upload (xhr)
  (lambda ()
    (when (equal (@ xhr ready-state) 4)
      (when (equal (@ xhr status) 200)
	(let ((font-face (chain document (create-element "style"))))
	  (chain font-face (set-attribute "type" "text/css"))
	  (setf (@ font-face inner-h-t-m-l)  (+ "@font-face { font-family: "
						"'"font-name"'"
						";  src: url('"
						(@ xhr response-text)
						"')}"))
	  (chain (@  ($ (chain document head))) (append font-face)))
	(prompt-for-letter)))))

(defun prompt-for-letter ()
  (chain (@ ($ "#mainMenu")) (empty))
  (display-font-sample)
  (chain (@ ($ "#mainMenu")) (append "<h1>Type a letter to generate</h1>"))

  ((@ ($ document) keypress)
   (lambda (event)
     (on-key-pressed event))))

(defun display-font-sample ()
    (chain (@ ($ "#mainMenu")) (append (+ "<h1 id='fontSample'>ABCDEEFGIJKLMNOPQRSTUVWXYZ </br> abcdefghijklmnopqrstuvwxyz</h1>")))
    (setf (@ (chain document (get-element-by-id "fontSample")) style font-family) (+ "'" font-name "'")))

(defun on-key-pressed (event)
  (chain (@ ($ "#mainMenu")) (empty))
  (clear-canvas)

  (let ((text (new (*point-text (create
				 content (chain *string (from-char-code (@ event which)))
				 fill-color "black"
				 font (+ "'" font-name "'"))))))
    (chain text (fit-bounds (@ view bounds)))
    (chain text (scale 0.8)))
  (chain view (draw))

  (send-letter (@ event which)))

(defun clear-canvas ()
  (when (chain project active-layer (has-children))
    (chain project active-layer (remove-children))))

(defun draw-line (coords-array)
  (console.log coords-array)
  (loop for line across coords-array
     do (let ((path (make-paper-object *path (create stroke-color "red"))))
	  (loop for i from 0 to 5 by 2
	     do (unless (and (or (= i 2) (= i 3))
			     (= (aref line 2) 0) (= (aref line 3) 0))
		  (chain path (add (make-paper-object *point (aref line i) (- (@ view bounds height) (aref line (+ i 1))))))))
	  (chain path (smooth)))
       (chain view (draw))))

;;websockets
(defun init-ws ()
  (let ((ws (new (*web-socket "ws://localhost:12345/bukvonesis"))))
    (setf (@ ws onmessage) (lambda (event)
			     (draw-line (chain $ (parse-j-s-o-n (@ event data))))))
    ws))

(defun send-letter (letter-code)
  (chain ws-client (send (chain *j-s-o-n (stringify (create "letter-code" letter-code "font-name" font-name))))))
