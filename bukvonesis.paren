(in-package :bukvonesis)

(defvar ws-client nil)

(defun upload-file (file)
  (let ((xhr (new (*x-m-l-http-request)))
	(form-data (new (*form-data))))

    (proc-setf bukvonesis-font-name (@ file name))
    (setf (@ xhr onreadystatechange) (on-font-upload xhr))
    (chain form-data (append "fontfile" file))
    (chain xhr (open "POST" "font-upload"))
    (chain xhr (send form-data))))

(defun on-font-upload (xhr)
  (lambda ()
    (when (equal (@ xhr ready-state) 4)
      (when (equal (@ xhr status) 200)
	(let ((font-face (chain document (create-element "style"))))
	  (chain font-face (set-attribute "type" "text/css"))
	  (setf (@ font-face inner-h-t-m-l)  (+ "@font-face { font-family: "
						"'" (@ processing-instance bukvonesis-font-name)"'"
						";  src: url('"
						(@ xhr response-text)
						"')}"))
	  (chain (@  ($ (chain document head))) (append font-face)))
	(prompt-for-letter)))))

(defun prompt-for-letter ()
  (chain (@ ($ "#mainMenu")) (empty))
  (display-font-sample)
  (chain (@ ($ "#mainMenu")) (append "<h1>Type a letter to generate</h1>"))

  ((@ ($ document) keypress)
   (lambda (event)
     (on-key-pressed event))))

(defun display-font-sample ()
    (chain (@ ($ "#mainMenu")) (append (+ "<h1 id='fontSample'>ABCDEFFGHIJKLMNOPQRSTUVWXYZ </br> abcdefghijklmnopqrstuvwxyz</h1>")))
    (setf (@ (chain document (get-element-by-id "fontSample")) style font-family) (+ "'" (@ processing-instance bukvonesis-font-name) "'")))

(defun on-key-pressed (event)
  ;;todo unbind event handler
  (chain (@ ($ "#mainMenu")) (empty))
  (proc-setf bukvonesis-letter (chain *string (from-char-code (@ event which))))
  (send-letter (@ event which)))


(defun get-derivative (curve t1)
  (let ((x (+ (* 2 (- 1 t1) (- (aref curve 2) (aref curve 0)))
	      (* 2 t1 (- (aref curve 4) (aref curve 2)))))
	(y (+ (* 2 (- 1 t1) (- (aref curve 3) (aref curve 1)))
	      (* 2 t1 (- (aref curve 5) (aref curve 3))))))
    (make-paper-object *point x y)))

;;Convert a quadratic bezier curve to cubic
(defun to-cubic (curve)
  (let ((cubic (make-array 8)))
    ;;start x, start y
    (setf (aref cubic 0) (aref curve 0))
    (setf (aref cubic 1) (aref curve 1))
    ;;control x1, control y1
    (setf (aref cubic 2) (+ (aref curve 0) (* (/ 2.0 3.0) (- (aref curve 2) (aref curve 0)))))
    (setf (aref cubic 3) (+ (aref curve 1) (* (/ 2.0 3.0) (- (aref curve 3) (aref curve 1)))))
    ;control x2, control y2
    (setf (aref cubic 4) (+ (aref curve 4) (* (/ 2.0 3.0) (- (aref curve 2) (aref curve 4)))))
    (setf (aref cubic 5) (+ (aref curve 5) (* (/ 2.0 3.0) (- (aref curve 3) (aref curve 5)))))
    ;end x, end y
    (setf (aref cubic 6) (aref curve 5))
    (setf (aref cubic 7) (aref curve 5)))
  cubic)

;;websockets
(defun init-ws ()
  (let ((ws (new (*web-socket "ws://localhost:12345/bukvonesis"))))
    (setf (@ ws onmessage) (lambda (event)
			     (draw-line (chain $ (parse-j-s-o-n (@ event data))))))
    ws))

(defun send-letter (letter-code)
  (chain ws-client (send (chain *j-s-o-n (stringify (create "letter-code" letter-code "font-name" (@ processing-instance bukvonesis-font-name)))))))

;;font app
(defun font-app (processing)
  (setf (@ processing bukvonesis-coords-array) nil)
  (setf (@ processing bukvonesis-font-name) nil)
  (setf (@ processing bukvonesis-letter) nil)

  (setf (@ processing setup)
	(lambda ()
	  (p5 (frame-rate 12))
	  (p5 (size 1900 1080)))) ;;todo no magick numbers

  (setf (@ processing draw)
	(lambda ()
	  (chain processing (background 255 255 255))

	  ;;Draw letter
	  (when (and (@ processing bukvonesis-font-name)
		     (@ processing bukvonesis-letter))
	    (setf fnt (p5 (load-font (@ processing bukvonesis-font-name))))
	    (p5 (text-font fnt 400))
	    (p5 (text-mode (@ processing *S-C-R-E-E-N)))
	    (p5 (text-align (@ processing *C-E-N-T-E-R)))
	    (p5 (fill 0))
	    (p5 (text (@ processing bukvonesis-letter) 950 800))) ;;todo no magick numbers

	  ;;draw generated coords
	  (when (@ processing bukvonesis-coords-array)
	    (loop for segment across coords-array
	       do (cond ((and (= (aref segment 2) 0) (= (aref segment 3) 0))
			 ;;add straight line
			 (let ((path (make-paper-object *path (create stroke-color "red"))))
			   (loop for i from 0 to 5 by 2
			      do (unless (or (= i 2) (= i 3))
				   (chain path (add (make-paper-object *point (aref segment i) (- (@ view bounds height) (aref segment (+ i 1))))))))))
			(T
			 ;;add curve
			 ;;todo this doesn't work, instead of converting to cubic curves, calculate the tangents at first and last point and use them to create handles and segments
			 (let ((cubic (to-cubic segment))
			       ;;todo this doesn't work, calculate curve tangents
			       (curve (make-paper-object *path (create stroke-color "red"))))
			   (chain curve (add (make-paper-object *segment (make-paper-object *point (aref segment 0) (- (@ view bounds height) (aref segment 1)))
								nil
								(get-derivative segment 0))))
			   (chain curve (add (make-paper-object *segment
								(make-paper-object *point (aref segment 4) (- (@ view bounds height) (aref segment 5)))
								(get-derivative segment 1)
								nil)))))))
	  ))))

;;main
(defvar processing-instance nil)

($$ (document ready)
    ;; setup processing.js
    (setf processing-instance (new (*Processing "bukvonesis" font-app)))

    ;; setup websockets
    (setf ws-client (init-ws))

    ;; event handlers
    ($$ ("#font-selector" change)
	(upload-file (@ ($ this) 0 files 0))))
